pipeline {
    agent {
        kubernetes {
            label 'jenkins-pipeline'
            defaultContainer 'jnlp'
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-pipeline
spec:
  // serviceAccountName: jenkins-ksa  # Kubernetes service account
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest
    # Jenkins will handle the arguments automatically
    volumeMounts:
    - mountPath: /var/jenkins_home
  - name: maven
    image: maven:3.8.5-openjdk-11  # Use a Maven Docker image
    command:
    - cat
    tty: true
  - name: jmeter
    image: justb4/jmeter:5.5  # this is official apache jmeter image
    command:
    - cat
    tty: true
  - name: selenium
    image: selenium/standalone-chrome:latest  # this is official selenium image
    command:
    - cat
    tty: true
  - name: gcloud
    image: google/cloud-sdk:slim   # this is official gcloud image
    command:
    - cat
    tty: true
  volumes:
  - name: jenkins-home
    emptyDir: {}
            '''
        }
    }

   environment {
        // Set Google Cloud Project ID
        GOOGLE_CLOUD_PROJECT = 'devsecops-poc-433005'
        // Set Artifact Registry details
        ARTIFACT_REGISTRY_REPO = 'maven-repo'
        ARTIFACT_REGISTRY_PACKAGE = 'maven-project'
        ARTIFACT_REGISTRY_VERSION = '1.0-SNAPSHOT'
        ARTIFACT_REGISTRY_LOCATION = 'us-west1'
    }

    stages {
        stage('Clone Source Code') {
            steps {
                script {
                    git url: 'https://github.com/prabhatu012345/jenkins-maven-pipeline.git', branch: 'main'
                }
            }
        }

        stage('Build with Maven') {
            steps {
                container('maven') {
                    script {
                        echo 'Building project with Maven...'
                        sh 'mvn clean package -DskipTests'
                    }
                }
            }
        }

        stage('Configure Maven Settings') {
            steps {
                container('maven') {
                    script {
                        // Create Maven settings.xml without service account key
                        sh 'mkdir -p /home/jenkins/.m2'
                        writeFile file: '/home/jenkins/.m2/settings.xml', text: '''
<settings>
    <profiles>
        <profile>
            <id>gcp</id>
            <repositories>
                <repository>
                    <id>gcp-repo</id>
                    <url>https://us-west1-maven.pkg.dev/${GOOGLE_CLOUD_PROJECT}/${ARTIFACT_REGISTRY_REPO}</url>
                </repository>
            </repositories>
        </profile>
    </profiles>

    <activeProfiles>
        <activeProfile>gcp</activeProfile>
    </activeProfiles>
</settings>
                        '''
                    }
                }
            }
        }

        stage('Upload to Artifact Registry') {
            steps {
                container('gcloud') {
                    script {
                        // Define the path to your JAR file
                        def jarPath = '/home/jenkins/agent/workspace/pipeline-demo/target/maven-project-1.0-SNAPSHOT.jar'

                        // Set the Google Cloud project
                        sh 'gcloud auth login --brief'
                        sh 'gcloud config set project $GOOGLE_CLOUD_PROJECT'

                        // Upload the JAR to Artifact Registry
                        sh """
                            gcloud artifacts packages create ${ARTIFACT_REGISTRY_PACKAGE} \
                                --repository=${ARTIFACT_REGISTRY_REPO} \
                                --location=${ARTIFACT_REGISTRY_LOCATION}

                            gcloud artifacts versions create ${ARTIFACT_REGISTRY_VERSION} \
                                --repository=${ARTIFACT_REGISTRY_REPO} \
                                --package=${ARTIFACT_REGISTRY_PACKAGE} \
                                --location=${ARTIFACT_REGISTRY_LOCATION}

                            gcloud artifacts versions upload \
                                --repository=${ARTIFACT_REGISTRY_REPO} \
                                --package=${ARTIFACT_REGISTRY_PACKAGE} \
                                --version=${ARTIFACT_REGISTRY_VERSION} \
                                --file=${jarPath} \
                                --location=${ARTIFACT_REGISTRY_LOCATION}
                        """
                }
              }
            }
        }

        stage('JUnit Test') {
            steps {
                container('maven') {
                    script {
                        echo 'Running JUnit tests...'
                        sh 'mvn test -Dtest=com.example.HelloWorldTest'
                    }
                }
            }
        }
        stage('Load Performance Test with JMeter') {
            steps {
                container('jmeter') {
                    script {
                        // Verify that the JMeter test plan file exists
                        echo 'Checking if JMeter test plan file exists...'
                        sh 'ls -l load_test_plan.jmx'
                        // Run JMeter performance tests
                        echo 'Running JMeter load test...'
                        sh 'jmeter -n -t load_test_plan.jmx -l results.jtl -e -o /results'
                    }
                }
            }
        }
        stage('Selenium Test') {
            steps {
                container('selenium') {
                    script {
                            echo 'Running Selenium tests...'
                            sh 'mvn test -Dtest=com/example/SeleniumTest'
                    }
                }
            }
        }
    }
}
